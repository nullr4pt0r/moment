name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java (Maven)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build the Spring Boot app using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Copy the built JAR and Dockerfile to the Azure VM
      - name: Copy files to Azure VM
        uses: appleboy/scp-action@v1
        with:
          host: ${{ SSH_HOST }}  # No "secrets." prefix
          port: ${{ SSH_PORT }}  # No "secrets." prefix
          username: ${{ SSH_USERNAME }}  # No "secrets." prefix
          key: ${{ SSH_PRIVATE_KEY }}  # No "secrets." prefix
          source: "target/*.jar,Dockerfile"
          target: "/home/${{ SSH_USERNAME }}/my-springboot-app/"

      # Deploy to Azure VM using SSH
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ SSH_HOST }}  # No "secrets." prefix
          port: ${{ SSH_PORT }}  # No "secrets." prefix
          username: ${{ SSH_USERNAME }}  # No "secrets." prefix
          key: ${{ SSH_PRIVATE_KEY }}  # No "secrets." prefix
          script: |
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker

            # Navigate to the app directory
            cd /home/${{ SSH_USERNAME }}/my-springboot-app

            # Stop and remove the existing container (if any)
            docker stop my-springboot-app || true
            docker rm my-springboot-app || true

            # Build the Docker image
            docker build -t my-springboot-app .

            # Run the new container with environment variables
            docker run -d \
              --name my-springboot-app \
              -p 9292:9292 \
              -e MONGO_CONNECTION=${{ MONGO_CONNECTION }} \  # Pass MongoDB connection
              -e REDIS_HOST=${{ REDIS_HOST }} \  # Pass Redis host
              -e REDIS_KEY=${{ REDIS_KEY }} \  # Pass Redis key
              my-springboot-app
